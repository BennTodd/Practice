Well hello there : ) Speaking of commit. One would say that it's all in the name, 'commit'. First you get your remote repo cloned/pulled to the local one. You start making changes, 
creating, deleting, modifying. Then, you tell Git 'Hey, I've made some changes here. You now need to recognize 'this', I want you to track 'that''. This is the staging area. Here, we 'add'.
Seems like we're all set, changes have been made and Git knows about them. Why commit? Knowing the exact changes made, who and when has added them, is pretty convenient, to say the least. However, that's not the main point here. What 'commit' does is not only it tracks all of these changes, what's most important is that it allows comming back. To put it simply, 'commit' is a certain checkpoint, a 'save file', just like in video games. No matter where you're at right now, how much time has passed or things been changed, having these 'saves', commits, will allways allow you to come back to that exact time and place when 'commit' was made. Just load your 'save' and start anew at any time.          

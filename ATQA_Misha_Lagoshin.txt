Hello there. Speaking of 'commit'. One would say that it's all in the name,'commit' to changes, but ther's more to that. First, you get your remote repository cloned/pulled to the local one. From here, you move to a Working Folder, start making changes. For now, these new edits are not affecting your local repo, feel free to move around. Once the work is done, it's time to tell Git 'Hey, I've made some changes here. You now need to recognize 'this', I want you to track 'that''. This is the Staging Area where we 'add' the changes, letting Git know that there are some new things to be aware of. Even though Git sees new modifications, they are still in the Staging, hanging in between and are yet to be actually added to the local repository, from where they can be finally pushed back to the remote. That's where you 'commit' to the changes adding them to the local repository itself. Changes are now not only added and affecting the repository, they are also being tracked with precise time stamps. 
Knowing the exact changes made, who and when has added them, is pretty convenient, to say the least. However, that's not all there is. What 'commit' does is that it not only tracks all of these changes, what's most important is that it allows comming back. To put it simply, 'commit' is a certain checkpoint, a 'save file', just like in video games. No matter where you're at right now, how much time has passed or things been changed, having these 'saves', commits, will allways allow you to revind, come back to the exact time and place when 'commit' was made. Just load your 'save' and start anew at any time.          
